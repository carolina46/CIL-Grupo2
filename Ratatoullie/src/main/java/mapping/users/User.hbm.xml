<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="model.users">

	<class name="User" table="user" >
	
		<id name="oid" type="java.lang.Long" column="id_user" unsaved-value="0">
				<generator class="native" />
		</id>
		
		<discriminator column="user_type" type="java.lang.String"/>
		
		<property name="fullName" type="java.lang.String" column="fullname"></property>
		
		<property name="user" type="java.lang.String" column="user" unique="true"></property>
		
		<property name="password" type="java.lang.String" column="password"></property>
		
		
		<subclass name="Administrator" discriminator-value="UA">
			<join table="administrator">
				<key column="id_administrator"/>
			</join>
		</subclass>
		
		
		<subclass name="Client" discriminator-value="UC">
			
			<one-to-one name="location" 
				class="model.business.Location" 
				cascade="all" 
				constrained="true"			
				lazy="false">
        	</one-to-one>
		
			<one-to-one name="ranking" 
				class="model.ranking.Ranking" 
				cascade="all" 
				constrained="true"			
				lazy="false">
        	</one-to-one>
        	
        	<list name="friends" lazy="false" cascade="none" table="client_friends">
				<!--none -  The user is independent from its friends (no changes are made in friends if the User changes)-->
				<key column="id_client" not-null="true"/>
					<index column="idx_cf"/>
				<many-to-many column="id_client_friend" class="model.users.Client"/>
			</list>
        	
        	<list name="comments" lazy="false" cascade="save-update">
			<!--save-update -  if the Client is saved, the comment too. If the Client is deleted the comment won't be deleted -->
				<key column="id_client"/>
					<index column="idx_c"/>
				<one-to-many class="model.Comment"/>
			</list>        	
        	
        	<!-- Votes -->
			<list name="restaurantVotes" lazy="false" cascade="all">
			<!--all -  if the Client is saved, the RestaurantVote too. If the Client is deleted the RestaurantVote too -->
				<key column="id_client"/>
					<index column="idx_c"/>
				<one-to-many class="model.vote.RestaurantVote"/>
			</list>
			
			<list name="menuVotes" lazy="false" cascade="all">
			<!--all -  if the Client is saved, the MenuVote too. If the Client is deleted the MenuVote too -->
				<key column="id_client"/>
					<index column="idx_c"/>
				<one-to-many class="model.vote.MenuVote"/>
			</list>
		
			<list name="dishVotes" lazy="false" cascade="all">
			<!--all -  if the Client is saved, the DishVote too. If the Client is deleted the DishVote too -->
				<key column="id_client"/>
					<index column="idx_c"/>
				<one-to-many class="model.vote.DishVote"/>
			</list>
		
        	
        	<!-- Recommendations -->
        	<list name="restaurantRecommendations" lazy="false" cascade="all">
			<!--all -  if the Client is saved, the RestaurantRecommendation too. If the Client is deleted the RestaurantRecommendation too -->
				<key column="id_client"/>
				<index column="idx_c"/>
				<one-to-many class="model.recommendation.RestaurantRecommendation"/>
			</list>
			
        	<list name="dishRecommendations" lazy="false" cascade="all">
			<!--all -  if the Client is saved, the DishRecommendation too. If the Client is deleted the DishRecommendation too -->
				<key column="id_client"/>
				<index column="idx_c"/>
				<one-to-many class="model.recommendation.DishRecommendation"/>
			</list>
			        	
			<list name="menuRecommendations" lazy="false" cascade="all">
				<!--all -  if the Client is saved, the MenuRecommendation too. If the Client is deleted the MenuRecommendation too -->
				<key column="id_client"/>
				<index column="idx_c"/>
				<one-to-many class="model.recommendation.MenuRecommendation"/>
			</list>
			
			<join table="client">
				<key column="id_client"/>
			</join>
			
			
			<subclass name="NormalClient" discriminator-value="NC">
			
				<join table="normal_client">
					<key column="id_normal_client"/>
				</join>
			</subclass>
		
			<subclass name="Responsible" discriminator-value="RC">
			
				<list name="notifications" lazy="false" cascade="all">
					<!--all -  if the Responsible is saved, the Notification too. If the Responsible is deleted the Notification too -->
						<key column="id_responsible"/>
						<index column="idx_rc"/>
					<one-to-many class="model.Notification"/>
				</list>
				
				<list name="restaurants" lazy="false" cascade="all">
					<!--all -  if the Responsible is saved, the Restaurant too. If the Responsible is deleted the Restaurant too -->
						<key column="id_responsible"/>
						<index column="idx_rc"/>
					<one-to-many class="model.business.Restaurant"/>
				</list>
			
				<join table="responsible_client">
					<key column="id_responsible_client"/>
				</join>
			</subclass>
		</subclass>
    </class>
</hibernate-mapping>